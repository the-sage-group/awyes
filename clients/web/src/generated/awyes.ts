// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "awyes.proto" (package "awyes", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Value } from "./google/protobuf/struct";
import { FieldDescriptorProto } from "./google/protobuf/descriptor";
/**
 * Node definition
 *
 * @generated from protobuf message awyes.Node
 */
export interface Node {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string context = 3;
     */
    context: string;
    /**
     * @generated from protobuf field: int32 version = 4;
     */
    version: number;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldDescriptorProto parameters = 6;
     */
    parameters: FieldDescriptorProto[];
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldDescriptorProto returns = 7;
     */
    returns: FieldDescriptorProto[];
}
/**
 * Edge definition
 *
 * @generated from protobuf message awyes.Edge
 */
export interface Edge {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string source = 2;
     */
    source: string;
    /**
     * @generated from protobuf field: string target = 3;
     */
    target: string;
}
/**
 * Flow definition
 *
 * @generated from protobuf message awyes.Flow
 */
export interface Flow {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2;
     */
    name: string;
    /**
     * @generated from protobuf field: string context = 3;
     */
    context: string;
    /**
     * @generated from protobuf field: int32 version = 4;
     */
    version: number;
    /**
     * @generated from protobuf field: string description = 5;
     */
    description: string;
    /**
     * @generated from protobuf field: repeated awyes.Node nodes = 6;
     */
    nodes: Node[];
    /**
     * @generated from protobuf field: repeated awyes.Edge edges = 7;
     */
    edges: Edge[];
    /**
     * @generated from protobuf field: repeated google.protobuf.FieldDescriptorProto parameters = 8;
     */
    parameters: FieldDescriptorProto[];
}
/**
 * Journey definition
 *
 * @generated from protobuf message awyes.Journey
 */
export interface Journey {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: awyes.Flow flow = 2;
     */
    flow?: Flow;
    /**
     * @generated from protobuf field: awyes.Node node = 3;
     */
    node?: Node;
    /**
     * @generated from protobuf field: map<string, google.protobuf.Value> state = 4;
     */
    state: {
        [key: string]: Value;
    };
}
/**
 * Event message for streaming execution updates
 *
 * @generated from protobuf message awyes.Event
 */
export interface Event {
    /**
     * @generated from protobuf field: awyes.EventType type = 1;
     */
    type: EventType;
    /**
     * @generated from protobuf field: optional awyes.Node node = 2;
     */
    node?: Node;
    /**
     * @generated from protobuf field: map<string, google.protobuf.Value> state = 3;
     */
    state: {
        [key: string]: Value;
    };
    /**
     * @generated from protobuf field: optional string message = 4;
     */
    message?: string;
    /**
     * @generated from protobuf field: optional string error = 5;
     */
    error?: string;
    /**
     * @generated from protobuf field: int64 timestamp = 6;
     */
    timestamp: string;
}
/**
 * Request to register a new flow
 *
 * @generated from protobuf message awyes.RegisterFlowRequest
 */
export interface RegisterFlowRequest {
    /**
     * @generated from protobuf field: awyes.Flow flow = 1;
     */
    flow?: Flow;
}
/**
 * @generated from protobuf message awyes.RegisterFlowResponse
 */
export interface RegisterFlowResponse {
    /**
     * @generated from protobuf field: awyes.Flow flow = 1;
     */
    flow?: Flow;
}
/**
 * Request to register a new node
 *
 * @generated from protobuf message awyes.RegisterNodeRequest
 */
export interface RegisterNodeRequest {
    /**
     * @generated from protobuf field: awyes.Node node = 1;
     */
    node?: Node;
}
/**
 * @generated from protobuf message awyes.RegisterNodeResponse
 */
export interface RegisterNodeResponse {
    /**
     * @generated from protobuf field: awyes.Node node = 1;
     */
    node?: Node;
}
/**
 * Request to execute a flow
 *
 * @generated from protobuf message awyes.ExecuteFlowRequest
 */
export interface ExecuteFlowRequest {
    /**
     * @generated from protobuf field: awyes.Flow flow = 1;
     */
    flow?: Flow;
}
/**
 * @generated from protobuf message awyes.ExecuteFlowResponse
 */
export interface ExecuteFlowResponse {
    /**
     * @generated from protobuf field: awyes.Journey journey = 1;
     */
    journey?: Journey;
}
/**
 * Request to list nodes
 *
 * @generated from protobuf message awyes.ListNodesRequest
 */
export interface ListNodesRequest {
}
/**
 * @generated from protobuf message awyes.ListNodesResponse
 */
export interface ListNodesResponse {
    /**
     * @generated from protobuf field: repeated awyes.Node nodes = 1;
     */
    nodes: Node[];
}
/**
 * Request to list flows
 *
 * @generated from protobuf message awyes.ListFlowsRequest
 */
export interface ListFlowsRequest {
}
/**
 * @generated from protobuf message awyes.ListFlowsResponse
 */
export interface ListFlowsResponse {
    /**
     * @generated from protobuf field: repeated awyes.Flow flows = 1;
     */
    flows: Flow[];
}
/**
 * Event types for streaming execution updates
 *
 * @generated from protobuf enum awyes.EventType
 */
export enum EventType {
    /**
     * @generated from protobuf enum value: UNKNOWN = 0;
     */
    UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: LISTENING = 1;
     */
    LISTENING = 1,
    /**
     * @generated from protobuf enum value: EXECUTING = 2;
     */
    EXECUTING = 2,
    /**
     * @generated from protobuf enum value: COMPLETED = 3;
     */
    COMPLETED = 3,
    /**
     * @generated from protobuf enum value: FAILED = 4;
     */
    FAILED = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class Node$Type extends MessageType<Node> {
    constructor() {
        super("awyes.Node", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "context", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "parameters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldDescriptorProto },
            { no: 7, name: "returns", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldDescriptorProto }
        ]);
    }
    create(value?: PartialMessage<Node>): Node {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.context = "";
        message.version = 0;
        message.description = "";
        message.parameters = [];
        message.returns = [];
        if (value !== undefined)
            reflectionMergePartial<Node>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Node): Node {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string context */ 3:
                    message.context = reader.string();
                    break;
                case /* int32 version */ 4:
                    message.version = reader.int32();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* repeated google.protobuf.FieldDescriptorProto parameters */ 6:
                    message.parameters.push(FieldDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.FieldDescriptorProto returns */ 7:
                    message.returns.push(FieldDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Node, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string context = 3; */
        if (message.context !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.context);
        /* int32 version = 4; */
        if (message.version !== 0)
            writer.tag(4, WireType.Varint).int32(message.version);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* repeated google.protobuf.FieldDescriptorProto parameters = 6; */
        for (let i = 0; i < message.parameters.length; i++)
            FieldDescriptorProto.internalBinaryWrite(message.parameters[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.FieldDescriptorProto returns = 7; */
        for (let i = 0; i < message.returns.length; i++)
            FieldDescriptorProto.internalBinaryWrite(message.returns[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.Node
 */
export const Node = new Node$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Edge$Type extends MessageType<Edge> {
    constructor() {
        super("awyes.Edge", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "target", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Edge>): Edge {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.source = "";
        message.target = "";
        if (value !== undefined)
            reflectionMergePartial<Edge>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Edge): Edge {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string source */ 2:
                    message.source = reader.string();
                    break;
                case /* string target */ 3:
                    message.target = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Edge, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string source = 2; */
        if (message.source !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.source);
        /* string target = 3; */
        if (message.target !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.target);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.Edge
 */
export const Edge = new Edge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Flow$Type extends MessageType<Flow> {
    constructor() {
        super("awyes.Flow", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "context", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "version", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Node },
            { no: 7, name: "edges", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Edge },
            { no: 8, name: "parameters", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FieldDescriptorProto }
        ]);
    }
    create(value?: PartialMessage<Flow>): Flow {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.context = "";
        message.version = 0;
        message.description = "";
        message.nodes = [];
        message.edges = [];
        message.parameters = [];
        if (value !== undefined)
            reflectionMergePartial<Flow>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Flow): Flow {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* string context */ 3:
                    message.context = reader.string();
                    break;
                case /* int32 version */ 4:
                    message.version = reader.int32();
                    break;
                case /* string description */ 5:
                    message.description = reader.string();
                    break;
                case /* repeated awyes.Node nodes */ 6:
                    message.nodes.push(Node.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated awyes.Edge edges */ 7:
                    message.edges.push(Edge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated google.protobuf.FieldDescriptorProto parameters */ 8:
                    message.parameters.push(FieldDescriptorProto.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Flow, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* string context = 3; */
        if (message.context !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.context);
        /* int32 version = 4; */
        if (message.version !== 0)
            writer.tag(4, WireType.Varint).int32(message.version);
        /* string description = 5; */
        if (message.description !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.description);
        /* repeated awyes.Node nodes = 6; */
        for (let i = 0; i < message.nodes.length; i++)
            Node.internalBinaryWrite(message.nodes[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated awyes.Edge edges = 7; */
        for (let i = 0; i < message.edges.length; i++)
            Edge.internalBinaryWrite(message.edges[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated google.protobuf.FieldDescriptorProto parameters = 8; */
        for (let i = 0; i < message.parameters.length; i++)
            FieldDescriptorProto.internalBinaryWrite(message.parameters[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.Flow
 */
export const Flow = new Flow$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Journey$Type extends MessageType<Journey> {
    constructor() {
        super("awyes.Journey", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "flow", kind: "message", T: () => Flow },
            { no: 3, name: "node", kind: "message", T: () => Node },
            { no: 4, name: "state", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } }
        ]);
    }
    create(value?: PartialMessage<Journey>): Journey {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.state = {};
        if (value !== undefined)
            reflectionMergePartial<Journey>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Journey): Journey {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* awyes.Flow flow */ 2:
                    message.flow = Flow.internalBinaryRead(reader, reader.uint32(), options, message.flow);
                    break;
                case /* awyes.Node node */ 3:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* map<string, google.protobuf.Value> state */ 4:
                    this.binaryReadMap4(message.state, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: Journey["state"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Journey["state"] | undefined, val: Journey["state"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field awyes.Journey.state");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: Journey, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* awyes.Flow flow = 2; */
        if (message.flow)
            Flow.internalBinaryWrite(message.flow, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* awyes.Node node = 3; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Value> state = 4; */
        for (let k of globalThis.Object.keys(message.state)) {
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.state[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.Journey
 */
export const Journey = new Journey$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Event$Type extends MessageType<Event> {
    constructor() {
        super("awyes.Event", [
            { no: 1, name: "type", kind: "enum", T: () => ["awyes.EventType", EventType] },
            { no: 2, name: "node", kind: "message", T: () => Node },
            { no: 3, name: "state", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "message", T: () => Value } },
            { no: 4, name: "message", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "error", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "timestamp", kind: "scalar", T: 3 /*ScalarType.INT64*/ }
        ]);
    }
    create(value?: PartialMessage<Event>): Event {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.type = 0;
        message.state = {};
        message.timestamp = "0";
        if (value !== undefined)
            reflectionMergePartial<Event>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Event): Event {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.EventType type */ 1:
                    message.type = reader.int32();
                    break;
                case /* optional awyes.Node node */ 2:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                case /* map<string, google.protobuf.Value> state */ 3:
                    this.binaryReadMap3(message.state, reader, options);
                    break;
                case /* optional string message */ 4:
                    message.message = reader.string();
                    break;
                case /* optional string error */ 5:
                    message.error = reader.string();
                    break;
                case /* int64 timestamp */ 6:
                    message.timestamp = reader.int64().toString();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: Event["state"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof Event["state"] | undefined, val: Event["state"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = Value.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field awyes.Event.state");
            }
        }
        map[key ?? ""] = val ?? Value.create();
    }
    internalBinaryWrite(message: Event, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.EventType type = 1; */
        if (message.type !== 0)
            writer.tag(1, WireType.Varint).int32(message.type);
        /* optional awyes.Node node = 2; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* map<string, google.protobuf.Value> state = 3; */
        for (let k of globalThis.Object.keys(message.state)) {
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k);
            writer.tag(2, WireType.LengthDelimited).fork();
            Value.internalBinaryWrite(message.state[k], writer, options);
            writer.join().join();
        }
        /* optional string message = 4; */
        if (message.message !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.message);
        /* optional string error = 5; */
        if (message.error !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.error);
        /* int64 timestamp = 6; */
        if (message.timestamp !== "0")
            writer.tag(6, WireType.Varint).int64(message.timestamp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.Event
 */
export const Event = new Event$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterFlowRequest$Type extends MessageType<RegisterFlowRequest> {
    constructor() {
        super("awyes.RegisterFlowRequest", [
            { no: 1, name: "flow", kind: "message", T: () => Flow }
        ]);
    }
    create(value?: PartialMessage<RegisterFlowRequest>): RegisterFlowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterFlowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterFlowRequest): RegisterFlowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.Flow flow */ 1:
                    message.flow = Flow.internalBinaryRead(reader, reader.uint32(), options, message.flow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterFlowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.Flow flow = 1; */
        if (message.flow)
            Flow.internalBinaryWrite(message.flow, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.RegisterFlowRequest
 */
export const RegisterFlowRequest = new RegisterFlowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterFlowResponse$Type extends MessageType<RegisterFlowResponse> {
    constructor() {
        super("awyes.RegisterFlowResponse", [
            { no: 1, name: "flow", kind: "message", T: () => Flow }
        ]);
    }
    create(value?: PartialMessage<RegisterFlowResponse>): RegisterFlowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterFlowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterFlowResponse): RegisterFlowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.Flow flow */ 1:
                    message.flow = Flow.internalBinaryRead(reader, reader.uint32(), options, message.flow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterFlowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.Flow flow = 1; */
        if (message.flow)
            Flow.internalBinaryWrite(message.flow, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.RegisterFlowResponse
 */
export const RegisterFlowResponse = new RegisterFlowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterNodeRequest$Type extends MessageType<RegisterNodeRequest> {
    constructor() {
        super("awyes.RegisterNodeRequest", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<RegisterNodeRequest>): RegisterNodeRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterNodeRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterNodeRequest): RegisterNodeRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterNodeRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.RegisterNodeRequest
 */
export const RegisterNodeRequest = new RegisterNodeRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RegisterNodeResponse$Type extends MessageType<RegisterNodeResponse> {
    constructor() {
        super("awyes.RegisterNodeResponse", [
            { no: 1, name: "node", kind: "message", T: () => Node }
        ]);
    }
    create(value?: PartialMessage<RegisterNodeResponse>): RegisterNodeResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<RegisterNodeResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegisterNodeResponse): RegisterNodeResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.Node node */ 1:
                    message.node = Node.internalBinaryRead(reader, reader.uint32(), options, message.node);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegisterNodeResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.Node node = 1; */
        if (message.node)
            Node.internalBinaryWrite(message.node, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.RegisterNodeResponse
 */
export const RegisterNodeResponse = new RegisterNodeResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFlowRequest$Type extends MessageType<ExecuteFlowRequest> {
    constructor() {
        super("awyes.ExecuteFlowRequest", [
            { no: 1, name: "flow", kind: "message", T: () => Flow }
        ]);
    }
    create(value?: PartialMessage<ExecuteFlowRequest>): ExecuteFlowRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteFlowRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFlowRequest): ExecuteFlowRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.Flow flow */ 1:
                    message.flow = Flow.internalBinaryRead(reader, reader.uint32(), options, message.flow);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFlowRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.Flow flow = 1; */
        if (message.flow)
            Flow.internalBinaryWrite(message.flow, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.ExecuteFlowRequest
 */
export const ExecuteFlowRequest = new ExecuteFlowRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExecuteFlowResponse$Type extends MessageType<ExecuteFlowResponse> {
    constructor() {
        super("awyes.ExecuteFlowResponse", [
            { no: 1, name: "journey", kind: "message", T: () => Journey }
        ]);
    }
    create(value?: PartialMessage<ExecuteFlowResponse>): ExecuteFlowResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ExecuteFlowResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExecuteFlowResponse): ExecuteFlowResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* awyes.Journey journey */ 1:
                    message.journey = Journey.internalBinaryRead(reader, reader.uint32(), options, message.journey);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExecuteFlowResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* awyes.Journey journey = 1; */
        if (message.journey)
            Journey.internalBinaryWrite(message.journey, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.ExecuteFlowResponse
 */
export const ExecuteFlowResponse = new ExecuteFlowResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNodesRequest$Type extends MessageType<ListNodesRequest> {
    constructor() {
        super("awyes.ListNodesRequest", []);
    }
    create(value?: PartialMessage<ListNodesRequest>): ListNodesRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListNodesRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNodesRequest): ListNodesRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListNodesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.ListNodesRequest
 */
export const ListNodesRequest = new ListNodesRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListNodesResponse$Type extends MessageType<ListNodesResponse> {
    constructor() {
        super("awyes.ListNodesResponse", [
            { no: 1, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Node }
        ]);
    }
    create(value?: PartialMessage<ListNodesResponse>): ListNodesResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.nodes = [];
        if (value !== undefined)
            reflectionMergePartial<ListNodesResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListNodesResponse): ListNodesResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated awyes.Node nodes */ 1:
                    message.nodes.push(Node.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListNodesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated awyes.Node nodes = 1; */
        for (let i = 0; i < message.nodes.length; i++)
            Node.internalBinaryWrite(message.nodes[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.ListNodesResponse
 */
export const ListNodesResponse = new ListNodesResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListFlowsRequest$Type extends MessageType<ListFlowsRequest> {
    constructor() {
        super("awyes.ListFlowsRequest", []);
    }
    create(value?: PartialMessage<ListFlowsRequest>): ListFlowsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ListFlowsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListFlowsRequest): ListFlowsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ListFlowsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.ListFlowsRequest
 */
export const ListFlowsRequest = new ListFlowsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListFlowsResponse$Type extends MessageType<ListFlowsResponse> {
    constructor() {
        super("awyes.ListFlowsResponse", [
            { no: 1, name: "flows", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Flow }
        ]);
    }
    create(value?: PartialMessage<ListFlowsResponse>): ListFlowsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.flows = [];
        if (value !== undefined)
            reflectionMergePartial<ListFlowsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListFlowsResponse): ListFlowsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated awyes.Flow flows */ 1:
                    message.flows.push(Flow.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListFlowsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated awyes.Flow flows = 1; */
        for (let i = 0; i < message.flows.length; i++)
            Flow.internalBinaryWrite(message.flows[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message awyes.ListFlowsResponse
 */
export const ListFlowsResponse = new ListFlowsResponse$Type();
/**
 * @generated ServiceType for protobuf service awyes.Awyes
 */
export const Awyes = new ServiceType("awyes.Awyes", [
    { name: "ListNodes", options: {}, I: ListNodesRequest, O: ListNodesResponse },
    { name: "ListFlows", options: {}, I: ListFlowsRequest, O: ListFlowsResponse },
    { name: "RegisterFlow", options: {}, I: RegisterFlowRequest, O: RegisterFlowResponse },
    { name: "ExecuteFlow", serverStreaming: true, options: {}, I: ExecuteFlowRequest, O: ExecuteFlowResponse },
    { name: "RegisterNode", options: {}, I: RegisterNodeRequest, O: RegisterNodeResponse },
    { name: "RunAndWait", serverStreaming: true, clientStreaming: true, options: {}, I: Event, O: Event }
]);
