// @generated by protobuf-ts 2.9.4 with parameter long_type_string
// @generated from protobuf file "awyes.proto" (package "awyes", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Awyes } from "./awyes";
import type { DuplexStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { ListTripsResponse } from "./awyes";
import type { ListTripsRequest } from "./awyes";
import type { Event } from "./awyes";
import type { WatchTripRequest } from "./awyes";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { StartTripResponse } from "./awyes";
import type { StartTripRequest } from "./awyes";
import type { ListRoutesResponse } from "./awyes";
import type { ListRoutesRequest } from "./awyes";
import type { RegisterRouteResponse } from "./awyes";
import type { RegisterRouteRequest } from "./awyes";
import type { ListHandlersResponse } from "./awyes";
import type { ListHandlersRequest } from "./awyes";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RegisterHandlerResponse } from "./awyes";
import type { RegisterHandlerRequest } from "./awyes";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * Awyes definition
 *
 * @generated from protobuf service awyes.Awyes
 */
export interface IAwyesClient {
    /**
     * @generated from protobuf rpc: RegisterHandler(awyes.RegisterHandlerRequest) returns (awyes.RegisterHandlerResponse);
     */
    registerHandler(input: RegisterHandlerRequest, options?: RpcOptions): UnaryCall<RegisterHandlerRequest, RegisterHandlerResponse>;
    /**
     * @generated from protobuf rpc: ListHandlers(awyes.ListHandlersRequest) returns (awyes.ListHandlersResponse);
     */
    listHandlers(input: ListHandlersRequest, options?: RpcOptions): UnaryCall<ListHandlersRequest, ListHandlersResponse>;
    /**
     * @generated from protobuf rpc: RegisterRoute(awyes.RegisterRouteRequest) returns (awyes.RegisterRouteResponse);
     */
    registerRoute(input: RegisterRouteRequest, options?: RpcOptions): UnaryCall<RegisterRouteRequest, RegisterRouteResponse>;
    /**
     * @generated from protobuf rpc: ListRoutes(awyes.ListRoutesRequest) returns (awyes.ListRoutesResponse);
     */
    listRoutes(input: ListRoutesRequest, options?: RpcOptions): UnaryCall<ListRoutesRequest, ListRoutesResponse>;
    /**
     * @generated from protobuf rpc: StartTrip(awyes.StartTripRequest) returns (awyes.StartTripResponse);
     */
    startTrip(input: StartTripRequest, options?: RpcOptions): UnaryCall<StartTripRequest, StartTripResponse>;
    /**
     * @generated from protobuf rpc: WatchTrip(awyes.WatchTripRequest) returns (stream awyes.Event);
     */
    watchTrip(input: WatchTripRequest, options?: RpcOptions): ServerStreamingCall<WatchTripRequest, Event>;
    /**
     * @generated from protobuf rpc: ListTrips(awyes.ListTripsRequest) returns (awyes.ListTripsResponse);
     */
    listTrips(input: ListTripsRequest, options?: RpcOptions): UnaryCall<ListTripsRequest, ListTripsResponse>;
    /**
     * @generated from protobuf rpc: RunNodeAndWait(stream awyes.Event) returns (stream awyes.Event);
     */
    runNodeAndWait(options?: RpcOptions): DuplexStreamingCall<Event, Event>;
}
/**
 * Awyes definition
 *
 * @generated from protobuf service awyes.Awyes
 */
export class AwyesClient implements IAwyesClient, ServiceInfo {
    typeName = Awyes.typeName;
    methods = Awyes.methods;
    options = Awyes.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RegisterHandler(awyes.RegisterHandlerRequest) returns (awyes.RegisterHandlerResponse);
     */
    registerHandler(input: RegisterHandlerRequest, options?: RpcOptions): UnaryCall<RegisterHandlerRequest, RegisterHandlerResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterHandlerRequest, RegisterHandlerResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListHandlers(awyes.ListHandlersRequest) returns (awyes.ListHandlersResponse);
     */
    listHandlers(input: ListHandlersRequest, options?: RpcOptions): UnaryCall<ListHandlersRequest, ListHandlersResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListHandlersRequest, ListHandlersResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RegisterRoute(awyes.RegisterRouteRequest) returns (awyes.RegisterRouteResponse);
     */
    registerRoute(input: RegisterRouteRequest, options?: RpcOptions): UnaryCall<RegisterRouteRequest, RegisterRouteResponse> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<RegisterRouteRequest, RegisterRouteResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListRoutes(awyes.ListRoutesRequest) returns (awyes.ListRoutesResponse);
     */
    listRoutes(input: ListRoutesRequest, options?: RpcOptions): UnaryCall<ListRoutesRequest, ListRoutesResponse> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListRoutesRequest, ListRoutesResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: StartTrip(awyes.StartTripRequest) returns (awyes.StartTripResponse);
     */
    startTrip(input: StartTripRequest, options?: RpcOptions): UnaryCall<StartTripRequest, StartTripResponse> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<StartTripRequest, StartTripResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: WatchTrip(awyes.WatchTripRequest) returns (stream awyes.Event);
     */
    watchTrip(input: WatchTripRequest, options?: RpcOptions): ServerStreamingCall<WatchTripRequest, Event> {
        const method = this.methods[5], opt = this._transport.mergeOptions(options);
        return stackIntercept<WatchTripRequest, Event>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: ListTrips(awyes.ListTripsRequest) returns (awyes.ListTripsResponse);
     */
    listTrips(input: ListTripsRequest, options?: RpcOptions): UnaryCall<ListTripsRequest, ListTripsResponse> {
        const method = this.methods[6], opt = this._transport.mergeOptions(options);
        return stackIntercept<ListTripsRequest, ListTripsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: RunNodeAndWait(stream awyes.Event) returns (stream awyes.Event);
     */
    runNodeAndWait(options?: RpcOptions): DuplexStreamingCall<Event, Event> {
        const method = this.methods[7], opt = this._transport.mergeOptions(options);
        return stackIntercept<Event, Event>("duplex", this._transport, method, opt);
    }
}
