syntax = "proto3";

import "google/protobuf/struct.proto";
import "google/protobuf/descriptor.proto";

package awyes;

option go_package = "github.com/the-sage-group/awyes/proto";

// Handler definition
message Handler {
  optional string context = 1;
  optional string name = 2;
  optional int32 version = 3;
  optional string description = 4;
  repeated google.protobuf.FieldDescriptorProto parameters = 5;
  repeated google.protobuf.FieldDescriptorProto returns = 6;
}

// Position definition
message Position {
  optional string name = 1;
  optional string description = 2;
  optional Handler handler = 3;
}

// Transition definition
message Transition {
  optional Position from = 1;
  optional Position to = 2;
  optional string label = 3;
}

// Route definition
message Route {
  optional string context = 1;
  optional string name = 2;
  optional string display_name = 3;
  optional int32 version = 4;
  optional string description = 5;
  repeated Position positions = 6;
  repeated Transition transitions = 7;
  repeated google.protobuf.FieldDescriptorProto parameters = 8;
}

// Trip definition
message Trip {
  optional string id = 1;
  optional Status status = 2;
  optional Entity entity = 3;
  optional Route route = 4;
  optional int64 started_at = 5;
  optional int64 completed_at = 6;
  map<string, google.protobuf.Value> state = 7;
}

// Entity definition
message Entity {
  optional string name = 1;
  optional EntityType type = 2;
}

enum EntityType {
  REPOSITORY = 0;
}

// Event message for streaming execution updates
message Event {
  optional string id = 1;
  optional Status status = 2;
  optional Entity entity = 3;
  optional Trip trip = 4;
  optional Position position = 5;
  optional string label = 6;
  optional string message = 7;
  optional int64 timestamp = 8;
  map<string, google.protobuf.Value> state = 9;
}

// Status for events and trips
enum Status {
  EXECUTING = 0;
  COMPLETED = 1;
  ERROR = 2;
}

// Labels for events and transitions
enum Label {
  SUCCESS = 0;
  FAILURE = 1;
}

// Event methods
message ListEventsRequest { optional string trip_id = 1; }
message ListEventsResponse { repeated Event events = 1; }

// Handlers methods
message RegisterHandlerRequest { optional Handler handler = 1; }
message RegisterHandlerResponse { optional Handler handler = 1; }
message ListHandlersRequest {}
message ListHandlersResponse { repeated Handler handlers = 1; }

// Routes methods
message RegisterRouteRequest { optional Route route = 1; }
message RegisterRouteResponse { optional Route route = 1; }
message ListRoutesRequest {}
message ListRoutesResponse { repeated Route routes = 1; }

// Trips methods
message StartTripRequest {
  optional Route route = 1;
  optional Entity entity = 2;
  optional Position start = 3;
  map<string, google.protobuf.Value> state = 4;
}
message StartTripResponse { optional Trip trip = 1; }
message WatchTripRequest { optional string trip_id = 1; }
message ListTripsRequest { optional Entity entity = 1; }
message ListTripsResponse { repeated Trip trips = 1; }

// Position methods
message RegisterPositionRequest { optional Position position = 1; }
message RegisterPositionResponse { optional Position position = 1; }
message ListPositionsRequest {}
message ListPositionsResponse { repeated Position positions = 1; }

// Awyes definition
service Awyes {
  // Handlers methods
  rpc RegisterHandler(RegisterHandlerRequest)
      returns (RegisterHandlerResponse) {}
  rpc ListHandlers(ListHandlersRequest) returns (ListHandlersResponse) {}

  // Routes methods
  rpc RegisterRoute(RegisterRouteRequest) returns (RegisterRouteResponse) {}
  rpc ListRoutes(ListRoutesRequest) returns (ListRoutesResponse) {}

  // Trips methods
  rpc StartTrip(StartTripRequest) returns (StartTripResponse) {}
  rpc WatchTrip(WatchTripRequest) returns (stream Event) {}
  rpc ListTrips(ListTripsRequest) returns (ListTripsResponse) {}

  // Position methods
  rpc RegisterPosition(RegisterPositionRequest)
      returns (RegisterPositionResponse) {}
  rpc ListPositions(ListPositionsRequest) returns (ListPositionsResponse) {}

  // Events methods
  rpc ListEvents(ListEventsRequest) returns (ListEventsResponse) {}

  // Node methods
  rpc RunNodeAndWait(stream Event) returns (stream Event) {}
}
